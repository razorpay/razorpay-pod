// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Razorpay
import CommonCrypto
import CoreLocation
import CoreTelephony
import Foundation
import Swift
import SystemConfiguration
import UIKit
import WebKit
public protocol PluginPaymentCompletionDelegate : AnyObject {
  func paymentSuccessful(orderID: Swift.String, dictVerification: [Swift.AnyHashable : Any]?)
  func paymentFailed(code: Swift.Int, errorDescription: Swift.String)
  func trackEvent(event: Swift.String, withProperties dict: [Swift.AnyHashable : Any]?)
}
@objc public protocol PluginPaymentDelegate : AnyObject {
  @objc func canProcessPayment(model: Razorpay.PluginPaymentModel) -> Swift.Bool
  @objc func identifier() -> Swift.String
  @objc func pay(model: Razorpay.PluginPaymentModel)
}
public protocol ErrorDescribable {
  var localizedDescription: Swift.String { get }
}
public typealias PluginPaymentError = Razorpay.ErrorDescribable & Swift.Error
@objc public protocol RazorpayProtocol {
}
@objc public protocol RazorpayResultProtocol : Razorpay.RazorpayProtocol {
  @objc func onComplete(response: [Swift.AnyHashable : Any])
}
@objc public protocol RazorpayPaymentCompletionProtocol : Razorpay.RazorpayProtocol {
  @objc @available(*, deprecated, message: "this function will accept a code of Type Int and not Int32 in future releases")
  func onPaymentError(_ code: Swift.Int32, description str: Swift.String)
  @objc func onPaymentSuccess(_ payment_id: Swift.String)
}
@objc public protocol RazorpayPaymentCompletionProtocolWithData : Razorpay.RazorpayProtocol {
  @objc @available(*, deprecated, message: "this function will accept a code of Type Int and not Int32 in future releases")
  func onPaymentError(_ code: Swift.Int32, description str: Swift.String, andData response: [Swift.AnyHashable : Any]?)
  @objc func onPaymentSuccess(_ payment_id: Swift.String, andData response: [Swift.AnyHashable : Any]?)
}
@objc public protocol ExternalWalletSelectionProtocol {
  @objc func onExternalWalletSelected(_ walletName: Swift.String, withPaymentData paymentData: [Swift.AnyHashable : Any]?)
}
@_hasMissingDesignatedInitializers @objc public class PluginPaymentModel : ObjectiveC.NSObject {
  final public let merchantKey: Swift.String
  final public let dictPaymentInformation: [Swift.AnyHashable : Any]
  final public let delegate: Razorpay.PluginPaymentCompletionDelegate
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Otpelf : ObjectiveC.NSObject {
  @objc public static func initWithWebView(_ webView: WebKit.WKWebView, andMerchantKey merchantKey: Swift.String?)
  @objc public static func getSharedInstance() -> Razorpay.Otpelf?
  @objc public func setPaymentData(_ data: [Swift.AnyHashable : Any])
  @objc public func webView(didFinish navigation: WebKit.WKNavigation!) throws
  @objc public func close()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class RazorpayCheckout : ObjectiveC.NSObject {
  @available(*, unavailable, message: "This method is unavailable. Use initWithKey:andDelegate: instead. See https://docs.razorpay.com/docs/ios for more information.")
  @objc public static func initWithKey(_ key: Swift.String, andDelegate delegate: Razorpay.RazorpayPaymentCompletionProtocol, forViewController vc: UIKit.UIViewController)
  @objc public static func initWithKey(_ key: Swift.String, andDelegate delegate: Razorpay.RazorpayProtocol) -> Razorpay.RazorpayCheckout
  @objc public static func initWithKey(_ key: Swift.String, andDelegateWithData delegate: Razorpay.RazorpayPaymentCompletionProtocolWithData) -> Razorpay.RazorpayCheckout
  @objc public static func publishUri(with data: Swift.String)
  @objc final public func setExternalWalletSelectionDelegate(_ walletDelegate: Razorpay.ExternalWalletSelectionProtocol)
  @objc final public func open(_ options: [Swift.AnyHashable : Any], displayController: UIKit.UIViewController)
  @objc final public func open(_ options: [Swift.AnyHashable : Any])
  @objc final public func open(_ options: [Swift.AnyHashable : Any], displayController: UIKit.UIViewController, arrExternalPaymentEntities: [Razorpay.PluginPaymentDelegate])
  @objc final public func open(_ options: [Swift.AnyHashable : Any], arrExternalPaymentEntities: [Razorpay.PluginPaymentDelegate])
  @objc final public func close()
  @objc final public func clearUserData()
  @objc deinit
}

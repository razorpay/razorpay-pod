// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Razorpay
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreLocation
import CoreTelephony
import Foundation
import JavaScriptCore
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public protocol PluginPaymentCompletionDelegate : AnyObject {
  func paymentSuccessful(orderID: Swift.String, dictVerification: [Swift.AnyHashable : Any]?)
  func paymentFailed(code: Swift.Int, errorDescription: Swift.String, data: [Swift.AnyHashable : Any])
  func trackEvent(event: Swift.String, withProperties dict: [Swift.AnyHashable : Any]?)
}
@objc public protocol PluginPaymentDelegate {
  @objc func canProcessPayment(model: Razorpay.PluginPaymentModel) -> Swift.Bool
  @objc func identifier() -> Swift.String
  @objc func pay(model: Razorpay.PluginPaymentModel)
}
public protocol ErrorDescribable {
  var localizedDescription: Swift.String { get }
}
public typealias PluginPaymentError = Razorpay.ErrorDescribable & Swift.Error
@_hasMissingDesignatedInitializers @objc public class PluginPaymentModel : ObjectiveC.NSObject {
  final public let merchantKey: Swift.String
  final public let dictPaymentInformation: [Swift.AnyHashable : Any]
  final public let delegate: any Razorpay.PluginPaymentCompletionDelegate
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class RazorpayCheckout : ObjectiveC.NSObject {
  @objc public static func initWithKey(_ key: Swift.String, andDelegate delegate: any Razorpay.RazorpayPaymentCompletionProtocol, withPaymentWebView merchantWebView: WebKit.WKWebView) -> Razorpay.RazorpayCheckout
  @objc final public func changeApiKey(_ newApiKey: Swift.String)
  @objc final public func payWithCred(withOptions options: [Swift.AnyHashable : Any], withSuccessCallback success: @escaping ([Swift.AnyHashable : Any]) -> Swift.Void, andFailureCallback failure: @escaping (Swift.String) -> Swift.Void)
  @objc final public func getCardFlows(_ options: [Swift.AnyHashable : Any], withCallback: @escaping (Swift.Bool) -> Swift.Void)
  @objc final public func getCardOtpData(response: @escaping (Swift.Bool) -> Swift.Void)
  @objc final public func submitOtp(otp: Swift.String)
  @objc final public func resendOtp(response: @escaping (Swift.Bool) -> Swift.Void)
  @objc final public func redirectToBankPage()
  @objc final public func getPaymentMethods(withOptions options: [Swift.AnyHashable : Any]?, withSuccessCallback success: @escaping ([Swift.AnyHashable : Any]) -> Swift.Void, andFailureCallback failure: @escaping (Swift.String) -> Swift.Void)
  @objc final public func getSubscriptionAmount(havingSubscriptionId subId: Swift.String, withSuccessCallback success: @escaping (Swift.UInt64) -> Swift.Void, andFailureCallback failure: @escaping (Swift.String) -> Swift.Void)
  @objc final public func getSubscriptionAmount(options: [Swift.AnyHashable : Any], withSuccessCallback success: @escaping (Swift.UInt64) -> Swift.Void, andFailureCallback failure: @escaping (Swift.String) -> Swift.Void)
  @objc final public func authorize(_ options: [Swift.AnyHashable : Any])
  @objc final public func openCheckout(dict: [Swift.AnyHashable : Any])
  @objc final public func userCancelledPayment()
  @objc final public func decodeURI(from data: Swift.String)
  @objc final public func close()
  @objc final public func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @objc final public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError er: any Swift.Error)
  @objc final public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError er: any Swift.Error)
  @objc final public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc final public func getCardNetwork(fromCardNumber cardNumber: Swift.String) -> Swift.String
  @available(*, deprecated, message: "use getAppsWhichSupportUpi(handler:) instead")
  @objc final public func getSupportedUPIApps() -> [Swift.String]
  @objc public static func getAppsWhichSupportUpi(handler: @escaping ([[Swift.AnyHashable : Any]]) -> Swift.Void)
  @objc final public func isCardValid(_ cardNumber: Swift.String) -> Swift.Bool
  @objc final public func isValidVpa(_ vpa: Swift.String, withSuccessCallback success: @escaping (([Swift.AnyHashable : Any]) -> Swift.Void), withFailure failure: @escaping (([Swift.AnyHashable : Any]) -> Swift.Void))
  @objc final public func getCardNetworkLength(ofNetwork network: Swift.String) -> Swift.Int
  @objc final public func getBankLogo(havingBankCode bankCode: Swift.String) -> Foundation.URL?
  @objc final public func getWalletSqLogo(havingWalletName name: Swift.String) -> Foundation.URL?
  @objc final public func getWalletLogo(havingWalletName name: Swift.String) -> Foundation.URL?
  @objc final public func payWithExternalPaymentEntity(options: [Swift.AnyHashable : Any], arrExternalPaymentEntities: [any Razorpay.PluginPaymentDelegate])
  @objc final public func publishUri(with data: Swift.String)
  @objc deinit
}
@objc public protocol RazorpayPaymentCompletionProtocol {
  @objc func onPaymentSuccess(_ payment_id: Swift.String, andData response: [Swift.AnyHashable : Any])
  @objc @available(*, deprecated, message: "this function will accept a code of Type Int and not Int32 in future releases")
  func onPaymentError(_ code: Swift.Int32, description str: Swift.String, andData response: [Swift.AnyHashable : Any])
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Otpelf : ObjectiveC.NSObject {
  @objc public static func initWithWebView(_ webView: WebKit.WKWebView, andMerchantKey merchantKey: Swift.String?)
  @objc public static func getSharedInstance() -> Razorpay.Otpelf?
  @objc public func setPaymentData(_ data: [Swift.AnyHashable : Any])
  @objc public func webView(didFinish navigation: WebKit.WKNavigation!) throws
  @objc public func close()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CXAvailability {
  @objc deinit
}
public struct CXError {
}
